<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".txt" #>
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
        <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
        <ProductVersion>8.0.30703</ProductVersion>
        <SchemaVersion>2.0</SchemaVersion>
        <ProjectGuid>$guid1$</ProjectGuid>
        <ProjectTypeGuids>{349c5851-65df-11da-9384-00065b846f21};{fae04ec0-301f-11d3-bf4b-00c04f79efbc}</ProjectTypeGuids>
        <OutputType>Library</OutputType>
        <AppDesignerFolder>Properties</AppDesignerFolder>
        <RootNamespace>$safeprojectname$</RootNamespace>
        <AssemblyName>$safeprojectname$</AssemblyName>
        <TargetFrameworkVersion>v$targetframeworkversion$</TargetFrameworkVersion>
        <FileAlignment>512</FileAlignment>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
        <DebugSymbols>true</DebugSymbols>
        <DebugType>full</DebugType>
        <Optimize>false</Optimize>
        <OutputPath>bin\Debug\</OutputPath>
        <DefineConstants>DEBUG;TRACE</DefineConstants>
        <ErrorReport>prompt</ErrorReport>
        <WarningLevel>4</WarningLevel>
        <DocumentationFile>bin\Debug\$safeprojectname$.xml</DocumentationFile>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
        <DebugSymbols>true</DebugSymbols>
        <DebugType>full</DebugType>
        <Optimize>true</Optimize>
        <OutputPath>bin\Release\</OutputPath>
        <DefineConstants>TRACE</DefineConstants>
        <ErrorReport>prompt</ErrorReport>
        <WarningLevel>4</WarningLevel>
        <DocumentationFile>bin\Release\$safeprojectname$.xml</DocumentationFile>
    </PropertyGroup>
    <ItemGroup>
        <Reference Include="Microsoft.CSharp" />
        <Reference Include="System" />
        <Reference Include="System.ComponentModel.DataAnnotations" />
        <Reference Include="System.Configuration" />
        <Reference Include="System.Core" />
        <Reference Include="System.Data" />
        <Reference Include="System.Data.DataSetExtensions" />
        <Reference Include="System.Drawing" />
        <Reference Include="System.EnterpriseServices" />
        <Reference Include="System.Web" />
        <Reference Include="System.Web.ApplicationServices" />
        <Reference Include="System.Web.DynamicData" />
        <Reference Include="System.Web.Entity" />
        <Reference Include="System.Web.Extensions" />
        <Reference Include="System.Web.Services" />
        <Reference Include="System.Xml" />
        <Reference Include="System.Xml.Linq" />
    </ItemGroup>
    <ItemGroup>
        <Content Include="Global.asax" />
        <Content Include="Web.config" />
        <None Include="Web.Debug.config">
            <DependentUpon>Web.config</DependentUpon>
        </None>
        <None Include="Web.Release.config">
            <DependentUpon>Web.config</DependentUpon>
        </None>
    </ItemGroup>
    <ItemGroup>
        <Compile Include="Properties\AssemblyInfo.cs" />
        <Compile Include="Global.asax.cs">
            <DependentUpon>Global.asax</DependentUpon>
        </Compile>
    </ItemGroup>
<#
    const int startingIndentation = 1;
    var baseDir = Host.ResolvePath("");
    ProcessFiles(baseDir, startingIndentation);
    ProcessEmptyDirectories(baseDir, startingIndentation);
#>
    <PropertyGroup>
        <VisualStudioVersion Condition="'$(VisualStudioVersion)' == ''">10.0</VisualStudioVersion>
        <VSToolsPath Condition="'$(VSToolsPath)' == ''">$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
    </PropertyGroup>
    <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
    <Import Project="$(VSToolsPath)\WebApplications\Microsoft.WebApplication.targets" Condition="'$(VSToolsPath)' != ''" />
    <Import Project="$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v10.0\WebApplications\Microsoft.WebApplication.targets" Condition="false" />
    <ProjectExtensions>
        <VisualStudio>
            <FlavorProperties GUID="{349c5851-65df-11da-9384-00065b846f21}">
                <WebProjectProperties>
                    <SaveServerSettingsInUserFile>True</SaveServerSettingsInUserFile>
                </WebProjectProperties>
            </FlavorProperties>
        </VisualStudio>
    </ProjectExtensions>
    <Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild">
        <PropertyGroup>
            <ErrorText>This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
        </PropertyGroup>
        <Error Condition="!Exists('..\packages\Microsoft.Net.Compilers.1.3.2\build\Microsoft.Net.Compilers.props')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\Microsoft.Net.Compilers.1.3.2\build\Microsoft.Net.Compilers.props'))" />
        <Error Condition="!Exists('..\packages\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.1.0.3\build\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.props')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.1.0.3\build\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.props'))" />
    </Target>
</Project>
 <#+
    readonly string[] _filesToExclude =
    {
        "AdminLTE Template.tt",
        "AdminLTE Template.txt",
        "AdminLTE Template.csproj",
        "AdminLTE Template.csproj.user",
        "AdminLTE Template.vstemplate",
        "AdminLTE.ico",
        "packages.tt",
        "ProjectTemplate.tt",
        "ProjectTemplate.txt",
        "ProjectTemplate.csproj",
        // These files are special and are directly built into the csproj above
        "AssemblyInfo.cs",
        "Global.asax",
        "Global.asax.cs",
        "Web.config",
        "Web.Debug.config",
        "Web.Release.config"
    };

    readonly string[] _directoriesToExclude =
    {
        "bin",
        "obj",
        "Properties"
    };

    void ProcessFiles(string baseDir, int indentLevel)
    {
        var files = GetAllFilesInDirectory(baseDir);
        files = files.Where(f => !_filesToExclude.Contains(f.FilePath) &&
                                 !StartsWithAny(f.FilePath, _directoriesToExclude));
        
        foreach (var fileGroup in files.GroupBy(g => g.ShouldCompile))
        {
            WriteLine(Indent("<ItemGroup>", indentLevel));

            foreach (var file in fileGroup)
            {
                if (file.ShouldCompile)
                {
                    WriteLine(Indent("<Compile Include=\"" + file.FilePath + "\" />", indentLevel + 1));
                }
                else
                {
                    WriteLine(Indent("<Content Include=\"" + file.FilePath + "\" />", indentLevel + 1));
                }
            }

            WriteLine(Indent("</ItemGroup>", indentLevel));
        }
    }

    void ProcessEmptyDirectories(string baseDir, int indentLevel)
    {
        var directories = GetEmptyDirectories(baseDir, baseDir);
        directories = directories.Where(d => !StartsWithAny(d, _directoriesToExclude));
        
        WriteLine(Indent("<ItemGroup>", indentLevel));

        foreach (var directory in directories)
        {
            WriteLine(Indent("<Folder Include=\"" + directory + "\\\" />", indentLevel + 1));
        }

        WriteLine(Indent("</ItemGroup>", indentLevel));
    }

    static IEnumerable<FileInclude> GetAllFilesInDirectory(string baseDir)
    {
        var fileTypesToCompile = new[]
        {
            ".cs",
            ".asax"
        };

        var files = Directory.GetFiles(baseDir, "*", SearchOption.AllDirectories);

        foreach (var file in files)
        {
            yield return new FileInclude
            {
                ShouldCompile = EndsWithAny(file, fileTypesToCompile),
                FilePath = file.Replace(baseDir + @"\", "")
            };
        }
    }

    static IEnumerable<string> GetEmptyDirectories(string baseDir, string directoryToEvaluate)
    {
        var emptyDirectories = new List<string>();
    
        foreach (var directory in Directory.GetDirectories(directoryToEvaluate))
        {
            emptyDirectories.AddRange(GetEmptyDirectories(baseDir, directory));
        
            if (Directory.GetFiles(directory).Length == 0 && Directory.GetDirectories(directory).Length == 0)
            {
                emptyDirectories.Add(directory.Replace(baseDir + @"\", ""));
            }
        }
    
        return emptyDirectories;
    }

    class FileInclude
    {
        public bool ShouldCompile { get; set; }
        public string FilePath { get; set; }
    }
    
    static string Indent(string value, int indent)
    {
        const int spacesPerIndent = 4;

        return new string(' ', indent * spacesPerIndent) + value;
    }

    static bool EndsWithAny(string value, IEnumerable<string> endings)
    {
        foreach (var ending in endings)
        {
            if (value.EndsWith(ending))
            {
                return true;
            }
        }

        return false;
    }

    static bool StartsWithAny(string value, IEnumerable<string> beginnings)
    {
        foreach (var beginning in beginnings)
        {
            if (value.StartsWith(beginning))
            {
                return true;
            }
        }

        return false;
    }
#>